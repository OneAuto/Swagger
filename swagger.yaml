---
swagger: "2.0"
info:
  description:
    "This is a sample server OneAuto server.  You can find out more about\
    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
    \  For this sample, you can use the api key `special-key` to test the authorization\
    \ filters."
  version: "1.0.5"
  title: "Swagger OneAuto"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "oneauto.herokuapp.com"
basePath: "/"
tags:
  - name: "pet"
    description: "Everything about your Pets"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "store"
    description: "Access to OneAuto orders"
  - name: "employee"
    description: "Operations about employee"
    externalDocs:
      description: "Find out more about our store"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /employee/createWithArray:
    post:
      tags:
        - "employee"
      summary: "Creates list of employees with given input array"
      description: ""
      operationId: "createemployeesWithArrayInput"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "List of employee object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/employee"
      responses:
        default:
          description: "successful operation"
  /employee/createWithList:
    post:
      tags:
        - "employee"
      summary: "Creates list of employees with given input array"
      description: ""
      operationId: "createemployeesWithListInput"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "List of employee object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/employee"
      responses:
        default:
          description: "successful operation"
  /employees/{empId}:
    get:
      tags:
        - "employee"
      summary: "Get employee by employee Id"
      description: ""
      operationId: "getemployeeById"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - Id: "employeeid"
          in: "path"
          description: "The id that needs to be fetched. Use 1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/employee"
        400:
          description: "Invalid employeename supplied"
        404:
          description: "employee not found"
    put:
      tags:
        - "employee"
      summary: "Updated employee"
      description: "This can only be done by the logged in employee."
      operationId: "updateemployee"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "employeename"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated employee object"
          required: true
          schema:
            $ref: "#/definitions/employee"
      responses:
        400:
          description: "Invalid employee supplied"
        404:
          description: "employee not found"
    delete:
      tags:
        - "employee"
      summary: "Delete employee"
      description: "This can only be done by the logged in employee."
      operationId: "deleteemployee"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "employeename"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid employeename supplied"
        404:
          description: "employee not found"

  /employees:
    post:
      tags:
        - "employee"
      summary: "Create employee"
      description: "This can only be done by the logged in employee."
      operationId: "createemployee"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "Created employee object"
          required: true
          schema:
            $ref: "#/definitions/employee"
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  OneAuto_auth:
    type: "oauth2"
    authorizationUrl: "https://OneAuto.swagger.io/oauth/authorize"
    flow: "implicit"
    scopes:
      read:pets: "read your pets"
      write:pets: "modify pets in your account"
definitions:
  ApiResponse:
    type: "object"
  employee:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      employeename:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      employeeStatus:
        type: "integer"
        format: "int32"
        description: "employee Status"
    xml:
      name: "employee"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
